diff --git a/dist/changesets-assemble-release-plan.cjs.js b/dist/changesets-assemble-release-plan.cjs.js
index e32a5e5d39c3bd920201b5694632d2b44c92d486..bf9eb78d0a3fb98c57f5d8fbfe42384e59cdf971 100644
--- a/dist/changesets-assemble-release-plan.cjs.js
+++ b/dist/changesets-assemble-release-plan.cjs.js
@@ -17,6 +17,8 @@ var semverGt__default = /*#__PURE__*/_interopDefault(semverGt);
 var semverSatisfies__default = /*#__PURE__*/_interopDefault(semverSatisfies);
 var semverInc__default = /*#__PURE__*/_interopDefault(semverInc);
 
+const ranges = ['patch', 'minor', 'major'];
+
 function _defineProperty(obj, key, value) {
   if (key in obj) {
     Object.defineProperty(obj, key, {
@@ -169,7 +171,7 @@ function incrementVersion(release, preInfo) {
     // because semver.inc with prereleases is confusing and this seems easier
 
 
-    version += `-${preInfo.state.tag}.${preVersion}`;
+    version += `-next.${preVersion}`;
   }
 
   return version;
@@ -228,16 +230,8 @@ function determineDependents({
         } of dependencyVersionRanges) {
           if (nextRelease.type === "none") {
             continue;
-          } else if (shouldBumpMajor({
-            dependent,
-            depType,
-            versionRange,
-            releases,
-            nextRelease,
-            preInfo,
-            onlyUpdatePeerDependentsWhenOutOfRange: config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
-          })) {
-            type = "major";
+          } else if (ranges.indexOf(nextRelease.type) > ranges.indexOf(type)) {
+            type = nextRelease.type;
           } else if ((!releases.has(dependent) || releases.get(dependent).type === "none") && (config.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.updateInternalDependents === "always" || !semverSatisfies__default["default"](incrementVersion(nextRelease, preInfo), versionRange))) {
             switch (depType) {
               case "dependencies":
@@ -275,17 +269,18 @@ function determineDependents({
       type,
       pkgJSON
     }) => {
-      // At this point, we know if we are making a change
-      updated = true;
       const existing = releases.get(name); // For things that are being given a major bump, we check if we have already
       // added them here. If we have, we update the existing item instead of pushing it on to search.
       // It is safe to not add it to pkgsToSearch because it should have already been searched at the
       // largest possible bump type.
 
-      if (existing && type === "major" && existing.type !== "major") {
-        existing.type = "major";
-        pkgsToSearch.push(existing);
+      if (existing) {
+        existing.type = ranges[Math.max(
+          ranges.indexOf(type),
+          ranges.indexOf(existing.type)
+        )];
       } else {
+        updated = true;
         let newDependent = {
           name,
           type,
